/**
 * @typedef {import('../types/log.types.js').LogLevels} LogLevels
 * @typedef {import('../types/log.types.js').LogLevelValue} LogLevelValue
 */
/**
 * M√≥dulo para medi√ß√£o e logging de desempenho de opera√ß√µes
 * @module PerformanceTimer
 * @see LogLevels
 * @see formatDuration
 */

const { logLevel, log } = require('./log.js');
const { formatDuration } = require('./utils.js');

/**
 * Executa uma fun√ß√£o e registra o tempo de execu√ß√£o com detalhes
 * @function logTimer
 * @param {Function} fn - Fun√ß√£o a ser executada e cronometrada
 * @param {string} [functionName] - Nome amig√°vel para identifica√ß√£o nos logs
 * @param {LogLevelValue} [level=logLevel.INFO] - N√≠vel de log (DEBUG, INFO, WARN, ERROR)
 * @param {...any} args - Argumentos para passar √† fun√ß√£o
 * @returns {Promise<any>} Promise que resolve com o resultado da fun√ß√£o
 * 
 * @example
 * // Exemplo s√≠ncrono
 * const result = await logTimer(
 *   () => Math.sqrt(16),
 *   'calcularRaizQuadrada',
 *   logLevel.DEBUG
 * );
 * 
 * @example
 * // Exemplo ass√≠ncrono
 * const data = await logTimer(
 *   async (url) => {
 *     const response = await fetch(url);
 *     return response.json();
 *   },
 *   'fetchDadosAPI',
 *   logLevel.INFO,
 *   'https://api.example.com/data'
 * );
 */
const logTimer = async (fn, functionName, level = logLevel.INFO, ...args) => {
  const name = functionName || fn.name || 'anonymous function';
  const startTime = performance.now();

  log(level, `‚è±Ô∏è Iniciando execu√ß√£o de: ${name}`);

  try {
    const result = await Promise.resolve(fn(...args));
    const endTime = performance.now();
    const duration = endTime - startTime;
    const formattedDuration = formatDuration(duration);

    log(level, `‚úÖ ${name} executada com sucesso`, {
      duration: formattedDuration,
      durationMs: Math.round(duration * 100) / 100,
    });

    return result;
  } catch (error) {
    const endTime = performance.now();
    const duration = endTime - startTime;
    const formattedDuration = formatDuration(duration);

    log(logLevel.ERROR, `‚ùå Erro em ${name}`, {
      duration: formattedDuration,
      durationMs: Math.round(duration * 100) / 100,
      error: error,
    });

    throw error;
  }
};

/**
 * Decorator que adiciona medi√ß√£o de tempo a uma fun√ß√£o
 * @function withTimer
 * @param {Function} fn - Fun√ß√£o original a ser decorada
 * @param {string} [functionName] - Nome amig√°vel para logs
 * @param {LogLevelValue} [level=logLevel.INFO] - N√≠vel de log
 * @returns {Function} Fun√ß√£o decorada com medi√ß√£o de tempo
 * 
 * @example
 * // Decorando uma fun√ß√£o existente
 * const fetchWithTimer = withTimer(
 *   fetchData,
 *   'fetchDataDecorated',
 *   logLevel.DEBUG
 * );
 * 
 * // Usando a fun√ß√£o decorada
 * const result = await fetchWithTimer('param1', 'param2');
 */
const withTimer = (fn, functionName, level = logLevel.INFO) => {
  const name = functionName || fn.name || 'decorated function';

  return async function (...args) {
    return await logTimer(fn, name, level, ...args);
  };
};

/**
 * Sistema de timer manual para medi√ß√£o granular com m√∫ltiplos checkpoints
 * @class Timer
 * 
 * @example
 * // Exemplo b√°sico de uso
 * const timer = new Timer('ProcessamentoDados', logLevel.DEBUG);
 * timer.start();
 * // ... opera√ß√£o 1
 * timer.checkpoint('Carregamento');
 * // ... opera√ß√£o 2
 * timer.checkpoint('Transformacao');
 * const stats = timer.end();
 */
class Timer {
  /**
   * Cria uma inst√¢ncia de Timer
   * @constructor
   * @param {string} name - Identificador √∫nico para o timer
   * @param {LogLevelValue} [level=logLevel.INFO] - N√≠vel de log padr√£o
   */
  constructor(name, level = logLevel.INFO) {
    /** 
     * Nome identificador do timer
     * @type {string}
     * @public
     */
    this.name = name;
    
    /**
     * N√≠vel de log para opera√ß√µes
     * @type {LogLevelValue}
     * @public
     */
    this.level = level;
    
    /**
     * Timestamp de in√≠cio
     * @type {?number}
     * @private
     */
    this.startTime = null;
    
    /**
     * Registro de checkpoints
     * @type {Array<Object>}
     * @private
     */
    this.checkpoints = [];
  }

  /**
   * Inicia a contagem de tempo
   * @method start
   * @returns {Timer} Inst√¢ncia atual para method chaining
   * 
   * @example
   * timer.start()
   *   .checkpoint('fase1')
   *   .checkpoint('fase2');
   */
  start() {
    this.startTime = performance.now();
    this.checkpoints = [];
    log(this.level, `‚è±Ô∏è Timer iniciado: ${this.name}`);
    return this;
  }

  /**
   * Registra um checkpoint intermedi√°rio
   * @method checkpoint
   * @param {string} label - Identificador do checkpoint
   * @returns {Timer} Inst√¢ncia atual para method chaining
   */
  checkpoint(label) {
    if (!this.startTime) {
      log(logLevel.WARN, `‚ö†Ô∏è Timer ${this.name} n√£o foi iniciado`);
      return this;
    }

    const currentTime = performance.now();
    const elapsed = currentTime - this.startTime;
    const lastCheckpoint = this.checkpoints[this.checkpoints.length - 1];
    const stepTime = lastCheckpoint
      ? currentTime - lastCheckpoint.timestamp
      : elapsed;

    const checkpoint = {
      label,
      elapsed: Math.round(elapsed * 100) / 100,
      stepTime: Math.round(stepTime * 100) / 100,
      timestamp: currentTime,
    };

    this.checkpoints.push(checkpoint);

    log(this.level, `üìç ${this.name} - ${label}`, {
      elapsed: formatDuration(elapsed),
      stepTime: formatDuration(stepTime),
    });

    return this;
  }

  /**
   * Finaliza o timer e retorna estat√≠sticas
   * @method end
   * @returns {Object} Estat√≠sticas de desempenho
   * @property {string} name - Nome do timer
   * @property {number} totalDuration - Tempo total em ms
   * @property {string} totalFormatted - Tempo total formatado
   * @property {Array} checkpoints - Detalhes dos checkpoints
   */
  end() {
    if (!this.startTime) {
      log(logLevel.WARN, `‚ö†Ô∏è Timer ${this.name} n√£o foi iniciado`);
      return null;
    }

    const endTime = performance.now();
    const totalDuration = endTime - this.startTime;

    const stats = {
      name: this.name,
      totalDuration: Math.round(totalDuration * 100) / 100,
      totalFormatted: formatDuration(totalDuration),
      checkpoints: this.checkpoints,
    };

    log(this.level, `üèÅ Timer finalizado: ${this.name}`, stats);

    // Reset para reutiliza√ß√£o
    this.startTime = null;
    this.checkpoints = [];

    return stats;
  }
}

module.exports = {
  logTimer,
  withTimer,
  Timer,
};
