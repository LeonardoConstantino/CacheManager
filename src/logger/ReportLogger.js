/**
 * @typedef {import('../types/log.types.js').LogLevelValue} LogLevelValue
 */

const CacheManager = require('../core/CacheManager.js');
const Logger = require('./Logger');
const { createNewTaskQueue } = require('../taskQueue/index.js');
const { logLevel, logStyles } = require('../utils/log.js');
const { formatDuration } = require('./../utils/utils.js');
/**
 * ReportLogger - Sistema de logging humanizado para estat√≠sticas de sistema
 *
 * Monitora e exibe de forma humanizada:
 * - Estat√≠sticas globais de cache
 * - Uso de mem√≥ria consolidado
 * - Status de filas de tarefas
 *
 * @class ReportLogger
 * @example
 * const reporter = new ReportLogger({
 *   interval: 30000, // 30 segundos
 *   enableCache: true,
 *   enableMemory: true,
 *   enableQueue: true
 * });
 *
 * reporter.start(cacheManager, queue);
 */
class ReportLogger {
  /**
   * Construtor da classe ReportLogger
   * @param {Object} options - Configura√ß√µes do reporter
   * @param {number} [options.interval=60000] - Intervalo em milissegundos (padr√£o: 1 minuto)
   * @param {boolean} [options.enableCache=true] - Habilitar relat√≥rio de cache
   * @param {boolean} [options.enableMemory=true] - Habilitar relat√≥rio de mem√≥ria
   * @param {boolean} [options.enableQueue=true] - Habilitar relat√≥rio de fila
   * @param {string} [options.loggerModule='REPORTER'] - Nome do m√≥dulo para o logger
   * @param {LogLevelValue} [options.logLevel=logLevel.INFO] - N√≠vel de log
   * @param {boolean} [options.showHeader=true] - Exibir cabe√ßalho do relat√≥rio
   * @param {boolean} [options.useColors=true] - Usar cores na sa√≠da
   * @param {boolean} [options.saveLogs=false] - Salvar logs em arquivo
   */
  constructor(options = {}) {
    // Configura√ß√µes padr√£o
    this.config = {
      interval: options.interval || 60000, // 1 minuto
      enableCache: options.enableCache !== false,
      enableMemory: options.enableMemory !== false,
      enableQueue: options.enableQueue !== false,
      loggerModule: options.loggerModule || 'REPORTER',
      logLevel: options.logLevel || logLevel.INFO,
      showHeader: options.showHeader !== false,
      useColors: options.useColors !== false,
      saveLogs: options.saveLogs !== false,
    };

    // Estado interno
    this.isRunning = false;
    this.logger = null;
    this.cacheManager = null;
    this.queue = null;
    this.reportCount = 0;
    this.startTime = 0;
    this.logger = new Logger(
      logStyles.subtle(this.config.loggerModule),
      this.config.logLevel
    );
    this.taskQueue = createNewTaskQueue({
      minTickInterval: 1000,
      logger: this.logger,
    });
    this.lastStatus = {
      cache: {},
      memory: {},
      queue: {},
    };
  }

  /**
   * Inicia o monitoramento autom√°tico
   * @param {CacheManager} cacheManager - Inst√¢ncia do gerenciador de cache
   * @param {Object} queue - Inst√¢ncia da fila de tarefas
   */
  start(cacheManager, queue) {
    if (this.isRunning) {
      this.logger.warn('ReportLogger j√° est√° em execu√ß√£o');
      return;
    }

    this.cacheManager = cacheManager;
    this.queue = queue;
    this.isRunning = true;
    this.startTime = Date.now();
    this.reportCount = 0;

    this.logger.info(
      'ReportLogger iniciado',
      this._getStyled('‚úÖ Sistema de relat√≥rios ativo', 'green')
    );

    // Usar TaskQueue para agendamento
    this._scheduleWithTaskQueue();

    // Gerar relat√≥rio inicial
    setTimeout(() => this._generateReport(), 1000);
  }

  /**
   * Para o monitoramento
   */
  stop() {
    if (!this.isRunning) {
      return;
    }

    this.isRunning = false;

    if (this.taskQueue) {
      // Remover tarefa da TaskQueue se existir
      try {
        this.taskQueue.removeTask?.('reportLogger');
      } catch (error) {
        // Ignorar erros de remo√ß√£o
      }
    }

    const uptime = this._formatUptime(Date.now() - this.startTime);
    this.logger.info(
      `ReportLogger parado. Uptime: ${uptime}, Relat√≥rios gerados: ${this.reportCount}`
    );
  }

  /**
   * Gera relat√≥rio sob demanda
   * @public
   */
  generateReportNow() {
    if (!this.cacheManager || !this.queue) {
      this.logger.warn(
        'Gerenciadores n√£o inicializados. Use start() primeiro.'
      );
      return;
    }

    this._generateReport();
  }

  /**
   * Obt√©m configura√ß√µes atuais
   * @public
   */
  getConfig() {
    return { ...this.config };
  }

  /**
   * Atualiza configura√ß√µes
   * @public
   */
  updateConfig(newConfig) {
    const oldInterval = this.config.interval;
    this.config = { ...this.config, ...newConfig };

    // Reiniciar se o intervalo mudou e o reporter est√° ativo
    if (this.isRunning && oldInterval !== this.config.interval) {
      const cacheManager = this.cacheManager;
      const queue = this.queue;
      if (cacheManager && queue) {
        this.stop();
        setTimeout(() => this.start(cacheManager, queue), 100);
      }
    }
  }

  /**
   * Obt√©m estat√≠sticas do reporter
   * @public
   */
  getStats() {
    return {
      isRunning: this.isRunning,
      reportCount: this.reportCount,
      uptime: this.startTime ? Date.now() - this.startTime : 0,
      config: this.getConfig(),
    };
  }

  /**
   * Destr√≥i completamente a inst√¢ncia do ReportLogger
   * Limpa todas as refer√™ncias, para timers e libera recursos
   * @public
   * @example
   * const reporter = new ReportLogger();
   * reporter.start(cacheManager, queue);
   * // ... uso normal
   * reporter.destroy(); // Limpa tudo e torna a inst√¢ncia inutiliz√°vel
   */
  destroy() {
    try {
      // Parar opera√ß√µes se estiver rodando
      if (this.isRunning) {
        this.stop();
      }

      // Log de destrui√ß√£o antes de limpar o logger
      if (this.logger) {
        const uptime = this.startTime
          ? this._formatUptime(Date.now() - this.startTime)
          : '0s';
        this.logger.info(
          this._getStyled(
            `üóëÔ∏è ReportLogger destru√≠do. Uptime total: ${uptime}, Relat√≥rios gerados: ${this.reportCount}`,
            'yellow'
          )
        );
      }

      // Limpar todas as refer√™ncias de objetos externos
      this.cacheManager = null;
      this.queue = null;
      this.taskQueue.destroy();
      this.logger.destroy();

      // Resetar estado
      this.isRunning = false;
      this.reportCount = 0;
      this.startTime = 0;

      // Limpar configura√ß√µes sens√≠veis
      this.config = {
        interval: 60000, // 1 minuto
        enableCache: false,
        enableMemory: false,
        enableQueue: false,
        loggerModule: 'REPORTER',
        logLevel: logLevel.INFO,
        showHeader: false,
        useColors: false,
        saveLogs: false,
      };
    } catch (error) {
      // Fallback para console se logger n√£o estiver dispon√≠vel
      console.error('[REPORTER] Erro durante destrui√ß√£o:', error);
    } finally {
      // Garantir que o objeto esteja marcado como destru√≠do
      this._destroyed = true;
      Object.freeze(this);
    }
  }

  /**
   * Agendamento usando TaskQueue
   * @private
   */
  _scheduleWithTaskQueue() {
    if (!this.taskQueue || typeof this.taskQueue.addTask !== 'function') {
      this.logger.warn('TaskQueue n√£o dispon√≠vel, usando setInterval');
      return;
    }

    try {
      this.taskQueue.addTask(
        'reportLogger',
        () => this._generateReport(),
        this.config.interval,
        {
          priority: 1,
          onError: (error) => {
            this.logger.error('Erro na gera√ß√£o de relat√≥rio:', error);
          },
          debounce: 20000,
        }
      );
    } catch (error) {
      this.logger.error('Erro ao agendar com TaskQueue:', error);
    }
  }

  /**
   * Gera um relat√≥rio detalhado com estat√≠sticas do sistema
   *
   * @description Coleta e formata informa√ß√µes sobre cache, mem√≥ria, fila e status do sistema
   * @returns {void}
   * @private
   */
  _generateReport() {
    if (!this.isRunning) {
      return;
    }
    if (
      !this.cacheManager ||
      this.cacheManager.destroyed ||
      !this.queue ||
      this.queue?.destroyed
    ) {
      this.logger.warn(
        'Gerenciadores n√£o inicializados ou foram destru√≠dos. Use start() primeiro.'
      );
      this.stop();
      return;
    }

    this.reportCount++;
    const timestamp = new Date().toISOString();
    const output = [];

    try {
      if (this.config.showHeader) {
        output.push(this._getHeader(timestamp));
      }

      if (this.config.enableCache && this.cacheManager) {
        output.push(this._getCacheStats());
      }

      if (this.config.enableMemory && this.cacheManager) {
        output.push(this._getMemoryStats());
      }

      if (this.config.enableQueue && this.queue) {
        output.push(this._getQueueStats());
      }

      if (this.reportCount === 1) {
        output.push(this._getReporterStatus());
      }

      output.push(this._getFooter());
    } catch (error) {
      this.logger.error('Erro ao gerar relat√≥rio:', error);
    }

    this.logger.info(output.join('\n'));

    if (this.config.saveLogs) {
      this.logger.save(`${this.config.loggerModule}_${this.reportCount}`);
    }
  }

  /**
   * Gera o cabe√ßalho do relat√≥rio com informa√ß√µes de timestamp e contagem
   *
   * @param {string} timestamp - Timestamp do momento da gera√ß√£o do relat√≥rio
   * @returns {string} Cabe√ßalho formatado com estiliza√ß√£o visual
   * @private
   */
  _getHeader(timestamp) {
    const uptime = this._formatUptime(Date.now() - this.startTime);
    const header = [
      '',
      '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê',
      `           üìä RELAT√ìRIO DO SISTEMA #${this.reportCount}`,
      `           üïê ${timestamp}`,
      `           ‚è±Ô∏è  Uptime: ${uptime}`,
      '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê',
      '',
    ].join('\n');

    return this._getStyled(header, 'section');
  }

  /**
   * Obt√©m e formata estat√≠sticas detalhadas de todos os caches gerenciados
   *
   * @returns {string} Uma string formatada com informa√ß√µes sobre cada cache,
   * incluindo tamanho, efici√™ncia, taxa de acerto, opera√ß√µes e conte√∫do
   * @throws {Error} Lan√ßa um erro se houver falha ao recuperar as estat√≠sticas de cache
   * @private
   */
  _getCacheStats() {
    try {
      const globalStats = this.cacheManager?.getStats();

      this.lastStatus.cacheStats ||= {};
      this.lastStatus.cacheStats.caches ||= {};

      const output = [];

      output.push(this._getStyled('üóÇÔ∏è  ESTAT√çSTICAS DE CACHE', 'bold'));
      output.push(
        this._getStyled(
          `   Total de Caches: ${globalStats.totalCaches}`,
          'cyan'
        )
      );

      for (const [_, stats] of Object.entries(globalStats.caches || {})) {
        // Inicializa hist√≥rico se necess√°rio
        this.lastStatus.cacheStats.caches[stats.name] ||= {
          usage: 0,
          hits: 0,
          misses: 0,
          missesExpired: 0,
          missesCold: 0,
          sets: 0,
          evictions: 0,
          evictionsTTL: 0,
          objectsInCache: 0,
          clonesInCache: 0,
          avgSetLatencyMS: 0,
          maxSetLatencyMS: { key: '', latencyMS: 0 },
        };

        const previous = this.lastStatus.cacheStats.caches[stats.name];
        const usage = this._calculateUsagePercentage(stats.size, stats.maxSize);
        const efficiency = this._calculateCacheEfficiency(stats);

        output.push('');
        output.push(this._getStyled(`   üìÅ Cache: ${stats.name}`, 'yellow'));

        output.push(
          `      ‚îî‚îÄ Tamanho: ${stats.size}/${
            stats.maxSize
          } (${usage}%) ${this._getTendency(usage, previous.usage)}`
        );
        previous.usage = usage;

        output.push(
          `      ‚îî‚îÄ TTL Padr√£o: ${this._formatTTL(stats.defaultTTL)}`
        );
        output.push(
          `      ‚îî‚îÄ Taxa de Acerto: ${stats.hitRate} (${efficiency})`
        );

        output.push(`      ‚îî‚îÄ Opera√ß√µes:`);
        output.push(
          `         ‚îî‚îÄ ${stats.hits} hits ${this._getTendency(
            stats.hits,
            previous.hits
          )}`
        );
        output.push(
          `         ‚îî‚îÄ ${stats.misses} misses ${this._getTendency(
            stats.misses,
            previous.misses
          )}`
        );
        output.push(
          `         ‚îî‚îÄ ${stats.missesExpired} expirados ${this._getTendency(
            stats.missesExpired,
            previous.missesExpired
          )}`
        );
        output.push(
          `         ‚îî‚îÄ ${stats.missesCold} n√£o encontrados ${this._getTendency(
            stats.missesCold,
            previous.missesCold
          )}`
        );
        output.push(`         ‚îî‚îÄ ${stats.sets} sets`);
        output.push(
          `            ‚îî‚îÄ Lat√™ncia m√©dia: ${formatDuration(stats.avgSetLatencyMS)}`
        );
        output.push(
          `            ‚îî‚îÄ M√°xima: ${stats.maxSetLatencyMS.key} (${formatDuration(stats.maxSetLatencyMS.latencyMS)})`
        );
        output.push(`            ‚îî‚îÄ Ultima set ${stats.lastSetKey}`);

        previous.hits = stats.hits;
        previous.misses = stats.misses;
        previous.missesExpired = stats.missesExpired;
        previous.missesCold = stats.missesCold;
        previous.sets = stats.sets;

        output.push(`      ‚îî‚îÄ Manuten√ß√£o:`);
        output.push(`         ‚îî‚îÄ ${stats.evictionsTTL} removidos por TTL`);
        output.push(`         ‚îî‚îÄ ${stats.evictions} por limite`);
        output.push(`         ‚îî‚îÄ ${stats.cleanups} limpezas`);

        output.push(`      ‚îî‚îÄ Conte√∫do:`);
        output.push(
          `         ‚îî‚îÄ ${stats.objectsInCache} objetos ${this._getTendency(
            stats.objectsInCache,
            previous.objectsInCache
          )}`
        );
        output.push(
          `         ‚îî‚îÄ ${stats.clonesInCache} clones ${this._getTendency(
            stats.clonesInCache,
            previous.clonesInCache
          )}`
        );

        previous.evictions = stats.evictions;
        previous.evictionsTTL = stats.evictionsTTL;
        previous.objectsInCache = stats.objectsInCache;
        previous.clonesInCache = stats.clonesInCache;
        previous.avgSetLatencyMS = stats.avgSetLatencyMS;
        previous.maxSetLatencyMS = stats.maxSetLatencyMS;
      }

      return output.join('\n');
    } catch (error) {
      this.logger.error('Erro ao obter estat√≠sticas de cache:', error);
      return '';
    }
  }

  /**
   * Obt√©m e formata estat√≠sticas consolidadas de uso de mem√≥ria para todos os caches
   *
   * @returns {string} Uma string formatada com informa√ß√µes detalhadas sobre o uso de mem√≥ria,
   * incluindo total de caches, tamanho total, n√∫mero de entradas e tamanho m√©dio por entrada
   * @throws {Error} Lan√ßa um erro se houver falha ao recuperar as estat√≠sticas de mem√≥ria
   * @private
   */
  _getMemoryStats() {
    try {
      const memoryStats = this.cacheManager?.getConsolidateMemoryStats();
      const consolidate = memoryStats?.consolidate;

      // Garante que lastStatus esteja inicializado
      this.lastStatus.memoryStats ||= {};
      const prev = this.lastStatus.memoryStats;

      const lines = [
        '',
        this._getStyled('üíæ USO DE MEM√ìRIA CONSOLIDADO', 'bold'),
        this._getStyled(
          `   Total de Caches: ${memoryStats?.totalCaches}`,
          'cyan'
        ),
        `   ‚îî‚îÄ Tamanho Total: ${
          consolidate?.totalSize
        } bytes ${this._getTendency(
          consolidate?.totalSize ?? 0,
          prev.totalSize ?? 0
        )}`,
        `   ‚îî‚îÄ Tamanho Estimado: ${consolidate?.estimatedSize}`,
        `   ‚îî‚îÄ Total de Entradas: ${
          consolidate?.totalEntries
        } ${this._getTendency(
          consolidate?.totalEntries ?? 0,
          prev.totalEntries ?? 0
        )}`,
        `   ‚îî‚îÄ Entradas de Objetos: ${
          consolidate?.objectEntries
        } ${this._getTendency(
          consolidate?.objectEntries ?? 0,
          prev.objectEntries ?? 0
        )}`,
        `   ‚îî‚îÄ Entradas Primitivas: ${
          consolidate?.primitiveEntries
        } ${this._getTendency(
          consolidate?.primitiveEntries ?? 0,
          prev.primitiveEntries ?? 0
        )}`,
        `   ‚îî‚îÄ Tamanho M√©dio por Entrada: ${consolidate?.averageEntrySize?.toFixed(
          2
        )} bytes ${this._getTendency(
          consolidate?.averageEntrySize ?? 0,
          prev.averageEntrySize ?? 0
        )}`,
      ];

      // Atualiza os valores anteriores
      Object.assign(this.lastStatus.memoryStats, {
        totalSize: consolidate?.totalSize,
        estimatedSize: consolidate?.estimatedSize,
        totalEntries: consolidate?.totalEntries,
        objectEntries: consolidate?.objectEntries,
        primitiveEntries: consolidate?.primitiveEntries,
        averageEntrySize: consolidate?.averageEntrySize,
      });

      return lines.join('\n');
    } catch (error) {
      this.logger.error('Erro ao obter estat√≠sticas de mem√≥ria:', error);
      return '';
    }
  }

  /**
   * Obt√©m e formata estat√≠sticas detalhadas sobre o status da fila de tarefas
   *
   * @returns {string} Uma string formatada com informa√ß√µes sobre o status da fila,
   * incluindo estado atual, estat√≠sticas de execu√ß√£o, detalhes de tarefas e m√©tricas de desempenho
   * @throws {Error} Lan√ßa um erro se houver falha ao recuperar o status da fila
   * @private
   */
  _getQueueStats() {
    try {
      const queueStatus = this.queue.getStatus();
      const output = [];

      output.push('');
      output.push(this._getStyled('‚ö° STATUS DA FILA DE TAREFAS', 'bold'));

      const statusIcon = queueStatus.isRunning ? 'üü¢' : 'üî¥';
      const statusText = queueStatus.isRunning ? 'ATIVA' : 'PARADA';
      output.push(
        this._getStyled(
          `   ${statusIcon} Status: ${statusText}`,
          queueStatus.isRunning ? 'green' : 'red'
        )
      );
      output.push(
        `   ‚îî‚îÄ Tarefas: ${queueStatus.totalTasks} total, ${queueStatus.activeTasks} ativas`
      );
      output.push(`   ‚îî‚îÄ Executando: ${queueStatus.currentlyExecuting}`);
      output.push(
        `   ‚îî‚îÄ Pr√≥xima Execu√ß√£o: ${this._formatNextExecution(
          queueStatus.nextExecutionIn
        )}`
      );
      output.push(`   ‚îî‚îÄ Heap Size: ${queueStatus.heapSize}`);

      const stats = queueStatus.stats;
      if (stats) {
        output.push('');
        output.push(
          this._getStyled('   üìà ESTAT√çSTICAS DETALHADAS', 'magenta')
        );
        output.push(
          `      ‚îî‚îÄ Execu√ß√µes: ${stats.totalExecutions} (${stats.totalErrors} erros)`
        );
        output.push(
          `      ‚îî‚îÄ Puladas por Debounce: ${stats.totalSkippedByDebounce}`
        );
        output.push(
          `      ‚îî‚îÄ Efici√™ncia do Debounce: ${stats.debounceEfficiency}`
        );
        output.push(
          `      ‚îî‚îÄ Tempo M√©dio de Execu√ß√£o: ${stats.avgExecutionTime?.toFixed(
            2
          )}ms`
        );
        output.push(
          `      ‚îî‚îÄ Uptime da Fila: ${this._formatUptime(
            Date.now() - stats.queueStartTime
          )}`
        );
      }

      const tasks = queueStatus.taskDetails;
      if (tasks && tasks.length > 0) {
        output.push('');
        output.push(this._getStyled('   üîß TAREFAS PRINCIPAIS', 'gray'));

        tasks.slice(0, 5).forEach((task) => {
          const activeIcon = task.isActive ? '‚úÖ' : '‚è∏Ô∏è';
          const nextExec = this._formatDuration(task.nextExecutionIn);

          output.push(`      ${activeIcon} ${task.id}`);
          output.push(
            `         ‚îî‚îÄ Execu√ß√µes: ${task.executionCount}, Prioridade: ${task.priority}`
          );
          output.push(`         ‚îî‚îÄ Pr√≥xima: ${nextExec}`);

          if (task.debounce?.enabled) {
            output.push(
              `         ‚îî‚îÄ Debounce: ${task.debounce.time}ms (${
                task.debounce.canCall ? 'pronto' : 'aguardando'
              })`
            );
          }
        });

        if (tasks.length > 5) {
          output.push(`      ... e mais ${tasks.length - 5} tarefas`);
        }
      }

      return output.join('\n');
    } catch (error) {
      this.logger.error('Erro ao obter status da fila:', error);
    }
    return '';
  }

  /**
   * Gera o rodap√© do relat√≥rio com informa√ß√µes sobre o pr√≥ximo relat√≥rio agendado
   * @returns {string} Rodap√© estilizado com o tempo at√© o pr√≥ximo relat√≥rio
   * @private
   */
  _getFooter() {
    const footer = [
      '',
      '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê',
      `           Pr√≥ximo relat√≥rio em: ${this._formatDuration(
        this.config.interval
      )}`,
      '‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê',
      '',
    ].join('\n');

    return this._getStyled(footer, 'subtle');
  }

  /**
   * Gera um relat√≥rio detalhado do status atual do ReportLogger
   * Exibe informa√ß√µes sobre o estado do logger, configura√ß√µes e estat√≠sticas
   *
   * @returns {string} Relat√≥rio formatado com status, configura√ß√µes e m√©tricas do logger
   * @private
   */
  _getReporterStatus() {
    const ReporterStatus = this.getStats();
    const output = [];

    output.push('');
    output.push(
      this._getStyled(`üóíÔ∏è STATUS DO ${this.config.loggerModule}`, 'bold')
    );

    const getStatusIcon = (status) =>
      status ? 'üü¢ Status: ATIVO' : 'üî¥ Status: PARADA';

    output.push(
      this._getStyled(
        `   ${getStatusIcon(ReporterStatus.isRunning)}`,
        ReporterStatus.isRunning ? 'green' : 'red'
      )
    );

    output.push(`   ‚îî‚îÄ Relat√≥rios: ${ReporterStatus.reportCount} total`);

    output.push('');
    output.push(this._getStyled(`üîß CONFIGURA√á√ïES`, 'bold'));
    output.push(`   ‚îî‚îÄ Intervalo: ${ReporterStatus.config.interval}ms`);
    output.push(
      `   ‚îî‚îÄ Cache: ${getStatusIcon(ReporterStatus.config.enableCache)}`
    );
    output.push(
      `   ‚îî‚îÄ Mem√≥ria: ${getStatusIcon(ReporterStatus.config.enableMemory)}`
    );
    output.push(
      `   ‚îî‚îÄ Fila: ${getStatusIcon(ReporterStatus.config.enableQueue)}`
    );
    output.push(`   ‚îî‚îÄ M√≥dulo de Log: ${ReporterStatus.config.loggerModule}`);
    output.push(`   ‚îî‚îÄ N√≠vel de Log: ${ReporterStatus.config.logLevel}`);
    output.push(`   ‚îî‚îÄ Mostrar Cabe√ßalho: ${ReporterStatus.config.showHeader}`);
    output.push(`   ‚îî‚îÄ Usar Cores: ${ReporterStatus.config.useColors}`);
    output.push('');

    return output.join('\n');
  }

  // ========================================
  // M√âTODOS UTILIT√ÅRIOS
  // ========================================

  /**
   * Aplica estilo ao texto se as cores estiverem habilitadas
   * @private
   */
  _getStyled(text, style) {
    if (!this.config.useColors) {
      return text;
    }

    // Verifica se o estilo √© v√°lido
    if (typeof logStyles === 'undefined' && !logStyles[style]) {
      return text;
    }

    return logStyles[style](text);
  }

  /**
   * Calcula efici√™ncia do cache
   * @private
   */
  _calculateCacheEfficiency(stats) {
    const total = stats.hits + stats.misses;
    if (total === 0) return 'N/A';

    const hitRate = (stats.hits / total) * 100;

    if (hitRate >= 90) return 'üî• Excelente';
    if (hitRate >= 70) return '‚úÖ Boa';
    if (hitRate >= 50) return '‚ö†Ô∏è Regular';
    return '‚ùå Ruim';
  }

  /**
   * Calcula porcentagem de uso
   * @private
   */
  _calculateUsagePercentage(current, max) {
    if (max === 0) return 0;
    return Math.round((current / max) * 100);
  }

  /**
   * Formata TTL para leitura humana
   * @private
   */
  _formatTTL(ttl) {
    if (ttl === 0) return 'Permanente';
    if (ttl < 1000) return `${ttl}ms`;
    if (ttl < 60000) return `${Math.round(ttl / 1000)}s`;
    if (ttl < 3600000) return `${Math.round(ttl / 60000)}min`;
    return `${Math.round(ttl / 3600000)}h`;
  }

  /**
   * Formata dura√ß√£o em formato leg√≠vel
   * @private
   */
  _formatDuration(ms) {
    if (ms < 1000) return `${ms}ms`;
    if (ms < 60000) return `${Math.round(ms / 1000)}s`;
    if (ms < 3600000) return `${Math.round(ms / 60000)}min`;
    if (ms < 86400000) return `${Math.round(ms / 3600000)}h`;
    return `${Math.round(ms / 86400000)}d`;
  }

  /**
   * Formata tempo de uptime
   * @private
   */
  _formatUptime(ms) {
    const seconds = Math.floor(ms / 1000);
    const minutes = Math.floor(seconds / 60);
    const hours = Math.floor(minutes / 60);
    const days = Math.floor(hours / 24);

    if (days > 0) return `${days}d ${hours % 24}h ${minutes % 60}m`;
    if (hours > 0) return `${hours}h ${minutes % 60}m ${seconds % 60}s`;
    if (minutes > 0) return `${minutes}m ${seconds % 60}s`;
    return `${seconds}s`;
  }

  /**
   * Formata pr√≥xima execu√ß√£o
   * @private
   */
  _formatNextExecution(timestamp) {
    if (!timestamp) return 'N/A';

    const now = Date.now();
    const diff = timestamp - now;

    if (diff <= 0) return 'Agora';
    return this._formatDuration(diff);
  }

  /**
   * Retorna a tend√™ncia entre dois valores com emoji, descri√ß√£o e diferen√ßa num√©rica.
   *
   * @param {number} currentValue - Valor atual
   * @param {number} previousValue - Valor anterior
   * @returns {string} Emoji + descri√ß√£o + diferen√ßa (ex: "üìà Alta (+10)")
   */
  _getTendency(currentValue, previousValue) {
    const diff = currentValue - previousValue;

    if (diff > 0) return `üìà Alta (+${diff.toFixed(2)})`;
    if (diff < 0) return `üìâ Queda (${diff.toFixed(2)})`;
    return `‚ûñ Est√°vel (0)`;
  }
}

// Exportar para uso em diferentes ambientes
// if (typeof module !== 'undefined' && module.exports) {
module.exports = ReportLogger;
// } else if (typeof window !== 'undefined') {
//   window.ReportLogger = ReportLogger;
// }

/**
 * EXEMPLOS DE USO:
 *
 * // Configura√ß√£o b√°sica
 * const reporter = new ReportLogger({
 *   interval: 30000, // 30 segundos
 *   enableCache: true,
 *   enableMemory: true,
 *   enableQueue: true
 * });
 *
 * // Iniciar monitoramento
 * reporter.start(cacheManager, queue);
 *
 * // Usar com TaskQueue personalizada
 * const customQueue = createNewTaskQueue({ minTickInterval: 100 });
 * reporter.start(cacheManager, queue, customQueue);
 *
 * // Gerar relat√≥rio imediatamente
 * reporter.generateReportNow();
 *
 * // Atualizar configura√ß√µes
 * reporter.updateConfig({ interval: 60000, useColors: false });
 *
 * // Parar monitoramento
 * reporter.stop();
 *
 * // Configura√ß√£o avan√ßada
 * const advancedReporter = new ReportLogger({
 *   interval: 120000, // 2 minutos
 *   enableCache: true,
 *   enableMemory: false, // Desabilitar relat√≥rio de mem√≥ria
 *   enableQueue: true,
 *   loggerModule: 'SYSTEM_MONITOR',
 *   showHeader: true,
 *   useColors: true,
 *   saveLogs: true,
 * });
 */
